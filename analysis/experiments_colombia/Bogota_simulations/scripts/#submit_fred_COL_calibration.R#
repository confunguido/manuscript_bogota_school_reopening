##==============================================#
## Author: Guido Espana
## Simulate COVID-19 in WA
## Year: 2019
##==============================================#
## User's input----------------
##==============================================#
library(pomp)
library(lubridate)
library(tidyverse)
library(fredtools)

##==============================================#
## Custom functions-------------
##==============================================#
write_cmd_function <- function(scalars_in, tmpfile){
    ## Delte jobs!!!
    cat("Deleting jobs\n")
    if(dir.exists(file.path(Sys.getenv('FRED_RESULTS'),'JOB'))){
        for(s in 1:nrow(scalars_in)){
            system(sprintf("fred_delete -f -k %s",scalars_in$job_id[s]), intern = T)
        }
        cat("All jobs deleted\n")
    }else{
        cat("FRED RESULTS doesn't exist, nothing to delete",Sys.getenv('FRED_RESULTS'),"\n")
    }

    job_cmd_str = sprintf("fred_job -k %s -I %d -p %s -n %.0f; Rscript ./post_process_fred_calibration.R %s %.0f",
                          scalars_in$job_id,
                          scalars_in$run_id,
                          scalars_in$params_file,
                          scalars_in$reps,
                          scalars_in$job_id,
                          scalars_in$reps
                          )

    fileConn<-file(tmpfile)
    writeLines(job_cmd_str, fileConn)
    close(fileConn)
}

##==============================================#
## Set STATE-------------------
##==============================================#
state_code = 11001
reps = 20
reps_per_job = 1
fit_date = as.Date('2020-09-16')
asymp_infectivity_in = 1.0
face_mask_transmission_efficacy_in = 0.73
kids_susceptibility_age_in = 10
args = (commandArgs(TRUE))
if(length(args) >= 1){
    state_code = as.numeric(args[1])
    if(length(args) >= 2){
        reps = as.numeric(args[2])
        if(length(args) >= 3){
            reps_per_job = as.numeric(args[3])
            if(length(args) >= 4){
                fit_date = as.Date(args[4])
                if(length(args) >= 5){
                    asymp_infectivity_in = as.numeric(args[5])
                    if(length(args) >= 6){
                        face_mask_transmission_efficacy_in = as.numeric(args[6])
                        if(length(args) >= 7){
                            kids_susceptibility_age_in = as.numeric(args[7])
                        }
                    }
                }
            }
        }
    }
}

##==============================================#
## FRED setup-------------
##==============================================#
fred_home = Sys.getenv('FRED_HOME')

fred_defaults = sprintf("%s/input_files/defaults", fred_home)
output.dir = file.path(Sys.getenv('scratch_dir'),sprintf('FRED_%d_calibration_asymp_%.2f_fm_%.2f_ksus_%.2f_mov',state_code, asymp_infectivity_in,face_mask_transmission_efficacy_in,kids_susceptibility_age_in))
print(output.dir)
if(file.exists(output.dir)){
    system(paste('rm -rf ', output.dir,sep = ''))
}
system(paste('mkdir -p ', output.dir,sep = ''))

file.copy('./scripts/post_process_fred_calibration.R',output.dir)
file.copy("./input_files/infection_hospitalization_risk.csv", output.dir)
file.copy('../input_files/params_covid.txt','./input_files/params_covid.txt', overwrite = T)
file.copy('../input_files/COL_covid_death_data.csv','./input_files/COL_covid_death_data.csv', overwrite = T)
file.copy('../input_files/Age_COL_covid_data.csv','./input_files/Age_COL_covid_data.csv', overwrite = T)
file.copy('../input_files/BOG_covid_death_data.csv','./input_files/BOG_covid_death_data.csv', overwrite = T)
file.copy('../input_files/Age_BOG_covid_data.csv','./input_files/Age_BOG_covid_data.csv', overwrite = T)
##file.copy('../input_files/11001_mobility_trends.csv','./input_files/11001_mobility_trends.csv', overwrite = T)
file.copy('../input_files/facemask_timeseries_compliance.csv','./input_files/facemask_timeseries_compliance.csv', overwrite = T)
file.copy('../input_files/Localidad_Unidad_Catastral.csv','./input_files/Localidad_Unidad_Catastral.csv', overwrite = T)
file.copy('./input_files/Localidad_Unidad_Catastral.csv',output.dir, overwrite = T)

file.copy('../input_files/11001_schools_open_gps.csv','./input_files/11001_schools_open_gps.csv', overwrite = T)

import_files = list.files('../input_files/','*imports.csv', full.names = T)
file.copy(import_files,'./input_files/', overwrite = T)

##==============================================#
## Sweep fixed parameters-------------------
##==============================================#
start_date = '2020-01-01' # YYYY-MM-DD
numDays = as.numeric(fit_date - as.Date(start_date)) # We don't need many days yet
track_infection_events_in = 4 # No need to track infections in the calibrations right now
track_fatality_events_in = 1 
report_age_of_infection_in = 4 # Track individual ages of infections
report_incidence_by_county_in = 0 # We don't need this for the calibration either
report_place_of_infection_in = 1 # We might want to track place of infection
synthetic_population_id = sprintf('synthetic_population_id = colombia_%d', state_code)

isolation_rate = 0.05175 # Specific for the US
shelter_in_place_students = 0 # Don't shelter students, use school closure for that

advance_seeding = 'exposed'
school_vacation_end = as.Date('2021-01-25')


## Shelter in place
interventions_st_df = read_csv('./input_files/interventions_Colombia.csv')

enable_shelter_in_place = 1
enable_shelter_in_place_timeseries = 1
shelter_in_place_delay_mean = as.integer(interventions_st_df$Shelter_in_place[interventions_st_df$State == state_code] - as.Date(start_date))

## Facemask usage
enable_face_mask_timeseries_in = 1
enable_face_mask_usage_in = 1
min_age_face_masks_in = 8

## Age specific susceptibility
susceptibility_params = read_csv('./input_files/age_susceptibility_fit.csv')
enable_age_specific_susceptibility_in = 1

## School closure policies
## School closure
early_school_vacation_end = as.Date('2021-01-25')
early_closure_duration = as.integer(early_school_vacation_end - interventions_st_df$School_closure[interventions_st_df$State == state_code])
early_school_reopening_day = as.numeric(early_school_vacation_end - as.Date(start_date))

school_closure_policy_in = 'global_schedule'
school_closure_day_in = as.integer(interventions_st_df$School_closure[interventions_st_df$State == state_code] - as.Date(start_date))
school_closure_duration_in = as.integer(school_vacation_end - interventions_st_df$School_closure[interventions_st_df$State == state_code])

## School parameters
## Reduced capacity
enable_school_reduced_capacity_in = 0
school_reduced_capacity_in = 0.35
school_reduced_capacity_day_in =  as.integer(early_school_vacation_end - as.Date(start_date))
school_student_teacher_ratio_in = 18

## Nursing home importations
enable_nursing_homes_importations_in = 1

## Contacts
neighborhood_contacts_in = 0.7883
workplace_contacts_in = 0.0686
office_contacts_in = 0.1372

## School contacts
school_contacts_in = 0.6295
classroom_contacts_in = 1.2590

## Holiday contacts
enable_holiday_contacts_in = 1
holiday_start_in = "11-16"
holiday_end_in = "01-07"

##==============================================#
## PARAMETER SWEEP--------------
##==============================================#
## Parameters to calibrate!!!!
imports_factor = c(0.08,1.0)
influenza_transmissibility = c(0.3,2.0)
shelter_in_place_compliance = c(0.4,1.1)
facemask_compliance = c(0.1,0.96)
workplace_contact_factor_in = c(1.0,1.2)
neighborhood_contact_factor_in = c(0.95,1.1)
holiday_contact_rate_in = c(1.4, 1.6)
influenza_susceptibility_by_age_offset_in = susceptibility_params %>% filter(estimate != "mean") %>% pull(offset_low)
influenza_susceptibility_by_age_rate_in = susceptibility_params %>% filter(estimate != "mean") %>% pull(rate_in)
influenza_susceptibility_by_age_cutoff_in = susceptibility_params %>% filter(estimate != "mean") %>% pull(cutoff)
influenza_susceptibility_by_age_high_in =  susceptibility_params %>% filter(estimate != "mean") %>% pull(high)
nursing_home_incidence_importations_factor_in = c(0.01, 0.05)

enable_age_specific_susceptibility_min_in = 0

influenza_susceptibility_by_age_minage_in = 10
influenza_susceptibility_by_age_minvalue_in = 1

## Read the susceptibility cutoff from an input
influenza_susceptibility_by_age_cutoff_in = c(kids_susceptibility_age_in, kids_susceptibility_age_in)


scalars_sobol_df = sobolDesign(
    lower = c(seed=1,imports_factor=imports_factor[1],
              influenza_transmissibility=influenza_transmissibility[1],
              shelter_in_place_compliance=shelter_in_place_compliance[1],
              facemask_compliance = facemask_compliance[1],
              influenza_susceptibility_by_age_offset = influenza_susceptibility_by_age_offset_in[1],
              influenza_susceptibility_by_age_rate = influenza_susceptibility_by_age_rate_in[1],
              influenza_susceptibility_by_age_cutoff = influenza_susceptibility_by_age_cutoff_in[1],
              influenza_susceptibility_by_age_high = influenza_susceptibility_by_age_high_in[1],
              nursing_home_incidence_importations_factor = nursing_home_incidence_importations_factor_in[1],
              workplace_contact_factor = workplace_contact_factor_in[1],
              neighborhood_contact_factor = neighborhood_contact_factor_in[1],
              holiday_contact_rate = holiday_contact_rate_in[1]
              ),
    upper = c(seed=as.integer(Sys.time()),
              imports_factor=imports_factor[2],
              influenza_transmissibility=influenza_transmissibility[2],
              shelter_in_place_compliance=shelter_in_place_compliance[2],
              facemask_compliance = facemask_compliance[2],
              influenza_susceptibility_by_age_offset = influenza_susceptibility_by_age_offset_in[2],
              influenza_susceptibility_by_age_rate = influenza_susceptibility_by_age_rate_in[2],
              influenza_susceptibility_by_age_cutoff = influenza_susceptibility_by_age_cutoff_in[2],
              influenza_susceptibility_by_age_high = influenza_susceptibility_by_age_high_in[2],
              nursing_home_incidence_importations_factor = nursing_home_incidence_importations_factor_in[2],
              workplace_contact_factor = workplace_contact_factor_in[2],
              neighborhood_contact_factor = neighborhood_contact_factor_in[2],
              holiday_contact_rate = holiday_contact_rate_in[2]
              ),
    reps)
scalars_sobol_df$school_contact_factor = 1.0

##==============================================#
## Initial conditions-------------------
##==============================================#
##initial_inf_file = sprintf('input_files/%d_imports_alternative.csv', state_code)
initial_inf_file = sprintf('input_files/%d_imports_combined.csv', state_code)
primary_cases_file = file.path(output.dir, sprintf('initial_cases_%d_%d.txt',state_code,1:reps))

initial_df = read_csv(initial_inf_file)
initial_df$day = as.numeric(difftime(initial_df$Date, as.Date(start_date), units='days'))

## Sample 'reps' from the initial conditions
## replicate_init = sample.int(n=length(unique(initial_df$Replicate)), size = reps, replace=T)

for(nn in 1:reps){
    ## tmp_df = filter(initial_df, Replicate == replicate_init[nn]) %>%
    ##     arrange(day) %>% dplyr::select(Imports, day)

    ## For now, choose the mean
    tmp_df = initial_df %>% group_by(day) %>% summarize(Imports = ceiling(mean(Imports))) %>% ungroup()
    
    tmp_df$Imports = round(tmp_df$Imports * scalars_sobol_df$imports_factor[nn])
    
    ## Now, let's add cases by week after initial cases            
    extra_rows = numDays - nrow(tmp_df)
    weekly_imports = 7
    if(extra_rows > 0){
        week_imp = data.frame(Imports = rep(weekly_imports, floor(extra_rows/7)), stringsAsFactors = F)
        week_imp$day = seq(from=max(tmp_df$day) + 1, by = 7, length.out = nrow(week_imp))
        tmp_df = bind_rows(tmp_df, week_imp)
    }
    
    init_cases_lines = sprintf('%.0f %.0f %.0f', tmp_df$day, tmp_df$day, tmp_df$Imports)
    
    fileConn<-file(primary_cases_file[nn])
    writeLines(init_cases_lines, fileConn)
    close(fileConn)
}


##==============================================#
## Shelter in place-------------------
##==============================================#
shelter_time_file = file.path(output.dir, sprintf('shelter_timeseries_%d_%d.txt',state_code,1:reps))

## Moving away from google's data to Grandata census-tract specific
## shelter_timeseries_df = read_csv('./input_files/interventions_covid_timevarying_shelter.csv')
shelter_timeseries_df = read_csv('./input_files/11001_mobility_trends.csv')
shelter_timeseries_df$day = as.numeric(difftime(shelter_timeseries_df$date, as.Date(start_date), units='days'))

for(nn in 1:reps){
    ## For now, choose the mean
    tmp_df = shelter_timeseries_df %>% filter(State == state_code, replicate == 1) %>%
        mutate(shelter_trend = shelter_trend * scalars_sobol_df$shelter_in_place_compliance[nn]) %>%
        filter(date <= as.Date('2020-10-01'))
    
    tmp_df$shelter_trend[tmp_df$shelter_trend < 0.0001] = 0.0
    tmp_df$shelter_trend[tmp_df$shelter_trend > 1.0] = 1.0
    
    shelter_time_lines = sprintf('%.0f %.0f %.4f 0 120 %d%s', tmp_df$day, tmp_df$day, tmp_df$shelter_trend, tmp_df$State, tmp_df$SCACODIGO)

    ## Add shelter by age
    ## shelter_age_lines = sprintf("82 212 %.4f 60 120", scalars_sobol_df$shelter_in_place_age_compliance[nn])
    fileConn<-file(shelter_time_file[nn])
    writeLines(c(shelter_time_lines), fileConn)
    close(fileConn)
}

##==============================================#
## Facemask compliance-------------------
##==============================================#
## TODO: Add school compliance. Right now it doesn't matter
## because schools have not opened for the calibration period, but that might change
facemask_time_file = file.path(output.dir, sprintf('facemask_compliance_timeseries_%d_%d.txt',state_code,1:reps))

facemask_timeseries_df = read_csv('./input_files/facemask_timeseries_compliance.csv') %>%
    dplyr::select(-Day)
facemask_timeseries_df$day = as.numeric(difftime(facemask_timeseries_df$Date, as.Date(start_date), units='days'))

for(nn in 1:reps){
    ## For now, choose the mean
    tmp_df = facemask_timeseries_df %>% filter(State == tolower(interventions_st_df$state_name[interventions_st_df$State == state_code])) %>%
        mutate(FacemaskTrends = FacemaskTrends * scalars_sobol_df$facemask_compliance[nn]) %>%
        dplyr::select(day, FacemaskTrends)
    if(max(tmp_df$day) < numDays){
        tmp_df2 = data.frame(day = seq(from=max(tmp_df$day) + 1, to = numDays),
                             FacemaskTrends = tail(tmp_df$FacemaskTrends,1), stringsAsFactors = F)
        tmp_df = bind_rows(tmp_df, tmp_df2)
    }

    compliance_time_lines = c()
    for(loc in c("workplace", "office", "other")){
        compliance_time_lines = c(compliance_time_lines,
                                  sprintf('%.0f %.0f %.4f %s', tmp_df$day, tmp_df$day, tmp_df$FacemaskTrends, loc)
                                  )
    }
    
    fileConn<-file(facemask_time_file[nn])
    writeLines(compliance_time_lines, fileConn)
    close(fileConn)
}

##==============================================#
## School closure-------------------
##==============================================#
schools_open_list = read_csv('./input_files/11001_schools_open_gps.csv')
schools_open_list$PropOpen[schools_open_list$PropOpen > 1] = 1.0
current_open_date = as.Date('2020-10-15')
localidad_esc = read_csv('./input_files/Localidad_Unidad_Catastral.csv')
localidad_list = 1:19

school_schedule_closed_file = file.path(output.dir, sprintf('school_schedule_closed_%d.txt',state_code))

## Write files
{
    initial_closure = sprintf("%d %d 1 20 0", school_closure_day_in,  as.integer(current_open_date - as.Date(start_date)))
    ## Make sure this is working properly
    vacation_closure = sprintf("%d %d 1 20 0", as.integer(as.Date('2020-12-15') - as.Date(start_date)),  as.integer(as.Date('2021-01-11') - as.Date(start_date)))
    school_baseline_reopen_date = as.integer(early_school_vacation_end - as.Date(start_date)) + 1
    school_current_early_open_date = as.integer(current_open_date - as.Date(start_date)) + 1
    ## Schools already open
    current_open_school_lines = c(initial_closure, vacation_closure)
    for(ll in 1:length(localidad_list)){
        localidad_tmp = filter(schools_open_list, Localidad_ID == localidad_list[ll])        
        esc_in_loc = sprintf("11001%s", localidad_esc$SCACODIGO[localidad_esc$Localidad == localidad_list[ll]])
        
        current_open_school_lines = c(current_open_school_lines,
                                   sprintf("%d %d 18 20 %0.2f 0 %s",  school_current_early_open_date, numDays, localidad_tmp[localidad_tmp$Grade == 'university','PropOpen'] * school_reduced_capacity_in, esc_in_loc),
                                   sprintf("%d %d 1 17 %.2f 0 %s", school_current_early_open_date, numDays, localidad_tmp[localidad_tmp$Grade == 'basic_ed','PropOpen'] * school_reduced_capacity_in, esc_in_loc))
    }   

    
    ## Write reopening files    
    fileConn<-file(school_schedule_closed_file)
    writeLines(current_open_school_lines, fileConn)
    close(fileConn)
}

##==============================================#
## fixed parameters-------------------
##==============================================#
## IMPORTANT: The offset delays the epidemic. Does not include added days of imported cases
epidemic_offset = 0
num_demes = 1

scalars_intervention = data.frame(stringsAsFactors=F)
for(s in 1:reps){
    intervention_df = data.frame(
        seed = floor(scalars_sobol_df$seed[s]),
        primary_cases_file = primary_cases_file[s],
        imports_factor = scalars_sobol_df$imports_factor[s],
        shelter_in_place_file = shelter_time_file[s],
        shelter_in_place_compliance = scalars_sobol_df$shelter_in_place_compliance[s],
        face_mask_timeseries_file = facemask_time_file[s],
        facemask_compliance = scalars_sobol_df$facemask_compliance[s],
        influenza_transmissibility = scalars_sobol_df$influenza_transmissibility[s],
        influenza_susceptibility_by_age_offset = scalars_sobol_df$influenza_susceptibility_by_age_offset[s],
        influenza_susceptibility_by_age_rate = scalars_sobol_df$influenza_susceptibility_by_age_rate[s],
        influenza_susceptibility_by_age_cutoff = scalars_sobol_df$influenza_susceptibility_by_age_cutoff[s],
        influenza_susceptibility_by_age_high = scalars_sobol_df$influenza_susceptibility_by_age_high[s],
        nursing_home_incidence_importations_factor = scalars_sobol_df$nursing_home_incidence_importations_factor[s],
        school_contacts = school_contacts_in * scalars_sobol_df$school_contact_factor[s],
        classroom_contacts = classroom_contacts_in * scalars_sobol_df$school_contact_factor[s],
        school_contact_factor = scalars_sobol_df$school_contact_factor[s],
        workplace_contacts = workplace_contacts_in * scalars_sobol_df$workplace_contact_factor[s],
        neighborhood_contacts = neighborhood_contacts_in * scalars_sobol_df$neighborhood_contact_factor[s],
        neighborhood_contact_factor = scalars_sobol_df$neighborhood_contact_factor[s],
        office_contacts = office_contacts_in * scalars_sobol_df$workplace_contact_factor[s],
        workplace_contact_factor = scalars_sobol_df$workplace_contact_factor[s],
        holiday_contact_rate = scalars_sobol_df$holiday_contact_rate[s],
        stringsAsFactors = F)
    
    scalars_intervention = bind_rows(scalars_intervention, intervention_df)
}

##==============================================#
## Create parameters to sweep-----------------
##==============================================#
## 1. Create DF with parameters
scalars = scalars_intervention %>%
    mutate(days = numDays,
           track_infection_events = track_infection_events_in,
           enable_age_specific_susceptibility = enable_age_specific_susceptibility_in,
           influenza_asymp_infectivity = asymp_infectivity_in,
           enable_age_specific_susceptibility_min = enable_age_specific_susceptibility_min_in,
           influenza_susceptibility_by_age_minage = influenza_susceptibility_by_age_minage_in,
           influenza_susceptibility_by_age_minvalue = influenza_susceptibility_by_age_minvalue_in,
           influenza_face_mask_transmission_efficacy = face_mask_transmission_efficacy_in,
           enable_nursing_homes_importations = enable_nursing_homes_importations_in,
           track_fatality_events = track_fatality_events_in,
           report_age_of_infection = report_age_of_infection_in,
           report_incidence_by_county = report_incidence_by_county_in,
           report_place_of_infection = report_place_of_infection_in,
           isolation_rate = isolation_rate,
           shelter_in_place_students = shelter_in_place_students,
           num_demes = num_demes,
           synthetic_population_id = synthetic_population_id,
           advance_seeding = advance_seeding,
           epidemic_offset = epidemic_offset,
           enable_shelter_in_place = enable_shelter_in_place,
           enable_shelter_in_place_timeseries = enable_shelter_in_place_timeseries,
           shelter_in_place_delay_mean = shelter_in_place_delay_mean,
           school_closure_policy = school_closure_policy_in,
           school_reduced_capacity = school_reduced_capacity_in,
           enable_school_reduced_capacity = enable_school_reduced_capacity_in,
           school_global_schedule_file = school_schedule_closed_file,
           school_student_teacher_ratio = school_student_teacher_ratio_in,
           school_closure_day = school_closure_day_in,
           school_closure_duration = school_closure_duration_in,
           enable_face_mask_timeseries = enable_face_mask_timeseries_in,
           min_age_face_masks = min_age_face_masks_in,
           enable_face_mask_usage = enable_face_mask_usage_in,
           holiday_start = holiday_start_in,
           holiday_end = holiday_end_in,
           enable_holiday_contacts = enable_holiday_contacts_in,
           start_date = start_date)

##===============================================##
## Write the parameters to files---------------
##===============================================##
defaults_params = './input_files/params_covid.txt'
basename_params = sprintf('covid_%s_params',state_code)
basename_jobs = sprintf('FRED_%s_calibration',state_code)
write_fred_parameters(scalars, defaults_params, output.dir,basename.in=basename_params, fred_defaults = fred_defaults)

## print report scalars parameters file with IDs
report_scalars = dplyr::select(
                            scalars, influenza_transmissibility,
                            influenza_asymp_infectivity,
                            shelter_in_place_compliance,influenza_face_mask_transmission_efficacy,
                            enable_age_specific_susceptibility_min,
                            enable_age_specific_susceptibility,
                            influenza_susceptibility_by_age_minage,
                            influenza_susceptibility_by_age_minvalue,
                            enable_face_mask_usage, enable_face_mask_timeseries,
                            facemask_compliance, min_age_face_masks,
                            enable_shelter_in_place_timeseries, start_date,
                            nursing_home_incidence_importations_factor,
                            influenza_susceptibility_by_age_rate,
                            influenza_susceptibility_by_age_offset,
                            influenza_susceptibility_by_age_cutoff,
                            influenza_susceptibility_by_age_high,
                            imports_factor, days, seed, primary_cases_file, school_closure_policy,
                            school_closure_duration, school_closure_day, school_student_teacher_ratio,
                            shelter_in_place_delay_mean,
                            school_contacts,
                            classroom_contacts,
                            school_contact_factor,
                            workplace_contacts, office_contacts, workplace_contact_factor,
                            neighborhood_contacts, neighborhood_contact_factor,
                            enable_holiday_contacts,
                            holiday_contact_rate) %>%
    mutate(job_id = sprintf("%s_%d", basename_jobs, row_number()), run_id = row_number(),
           params_file = sprintf('%s_%d.txt',basename_params,row_number()),
           reps = reps_per_job,
           state_code = state_code,
           advance_seeding = advance_seeding,
           epidemic_offset = epidemic_offset
           )

write.csv(report_scalars, file.path(output.dir, 'FRED_parameters.csv'), row.names= F, quote = F)

##===============================================##
## submit to CRC---------------
##===============================================##
fred_results_dir = file.path(output.dir,"FRED_RESULTS")

Sys.setenv(FRED_RESULTS=fred_results_dir)

if(!dir.exists(fred_results_dir)){
    dir.create(fred_results_dir)
}

submit_jobs(experiment_supername_in = sprintf('FRED_COLOMBIA_CALIBRATION-ASYMP-%.2fFM%.2f-KSUS%.2f-MOV',asymp_infectivity_in,face_mask_transmission_efficacy_in,kids_susceptibility_age_in),
            experiment_name_in = as.character(state_code),
            experiment_dir_in = output.dir,
            params_base = basename_params,
            job_base = basename_jobs,
            reps = reps_per_job,
            scalars = report_scalars,
            FUN = write_cmd_function,cores_in=5,walltime_in = "2:00:00",
            subsys="UGE",
            fred_home_dir_in=fred_home, fred_results_in=fred_results_dir)

